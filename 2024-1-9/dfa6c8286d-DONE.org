#+INCLUDE: "../../prefix.org"

#+TITLE: NI-700 PMU驱动方案设计                        

对应一个ni-700下个多个node，如VD,CD,PD,PMU,ASNI,AMNI...
struct ni_node {
	void __iomem *base;
	enum ni_node_type type;
	u16 id;
};
对应一个ni-700，其中nodes存放此ni-700下所有节点
struct ni_pmu {
	void __iomem *base;
	DECLARE_BITMAP(used_counters, NI_PMU_COUNTER_NUM);
	struct perf_event *events[NI_PMU_COUNTER_NUM];
	struct perf_event *cycle_event; // 特殊的那个cycle计数器
	struct pmu pmu;
	unsigned int irq;
	unsigned int on_cpu;
	struct device *dev;
	struct ni_node *nodes[0];
};
标识一个组件模型的事件
struct ni_event_desc {
	u64 eventid;
	const char *name;
};
唯一标识一个实例事件，ni_pmu区分了不同pccs域，node区分到了是那个node，ev_desc区分到了事件id
事件名区分了node
struct ni_event_attr {
	struct device_attribute attr;
	struct ni_event_desc *ev_desc; // 如果这个不为空，则是事件类型1
	struct ni_node *node;          // 如果ev_desc为空，这个不为空，则是事件类型2，否则3
};


config:
0-5  8-13 16-21 24-29 32-37 40-45 48-53 56-61 63
e1   e2   e3    e4    e5    e6    e7    e8    cycles
event
以节点为单位，增加节点数量个特殊属性。其中内容为：
e1=?,e2=?,e3=?,e4=?,e5=?,e6=?,e7=?,e8=?,nodeid=x

增加特殊事件cycles，其中内容为：
cycles=1

config1
0-15       16-31
nodetype  nodeid

因此，按上述划分，事件有三类
1. 通用事件，spec上有的
2. 节点汇合事件，说明节点可以有多个事件的
3. cycles事件


Global --> VD --> PD --> CD --> nodes
一个CD一个PMU
一个PD一个IRQ

上述内容已经基本更新迭代，具体内容看源码

<2024-01-25 Thu>：要测试的内容：
中断溢出，
热插拔
