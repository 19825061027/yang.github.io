#+INCLUDE: "../../prefix.org"

#+TITLE: linux insmod报错问题探究

如果使能CONFIG_MODVERSIONS，则modinfo中的vermagic内核版本不用和内核保持一致。但会
增加一个内核导出符号的CRC校验。
如果没使能CONFIG_MODVERSIONS，则modinfo中的vermagic需要和内核版本保持一致。

内核版本一致，也就是vermagic一样。
#+begin_src c
  #ifndef _LINUX_VERMAGIC_H
#define _LINUX_VERMAGIC_H

#ifndef INCLUDE_VERMAGIC
#error "This header can be included from kernel/module.c or *.mod.c only"
#endif

#include <generated/utsrelease.h>
#include <asm/vermagic.h>

/* Simply sanity version stamp for modules. */
#ifdef CONFIG_SMP
#define MODULE_VERMAGIC_SMP "SMP "
#else
#define MODULE_VERMAGIC_SMP ""
#endif
#ifdef CONFIG_PREEMPT_BUILD
#define MODULE_VERMAGIC_PREEMPT "preempt "
#elif defined(CONFIG_PREEMPT_RT)
#define MODULE_VERMAGIC_PREEMPT "preempt_rt "
#else
#define MODULE_VERMAGIC_PREEMPT ""
#endif
#ifdef CONFIG_MODULE_UNLOAD
#define MODULE_VERMAGIC_MODULE_UNLOAD "mod_unload "
#else
#define MODULE_VERMAGIC_MODULE_UNLOAD ""
#endif
#ifdef CONFIG_MODVERSIONS
#define MODULE_VERMAGIC_MODVERSIONS "modversions "
#else
#define MODULE_VERMAGIC_MODVERSIONS ""
#endif
#ifdef RANDSTRUCT
#include <generated/randstruct_hash.h>
#define MODULE_RANDSTRUCT "RANDSTRUCT_" RANDSTRUCT_HASHED_SEED
#else
#define MODULE_RANDSTRUCT
#endif

#define VERMAGIC_STRING 						\
	UTS_RELEASE " "							\
	MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT 			\
	MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS	\
	MODULE_ARCH_VERMAGIC						\
	MODULE_RANDSTRUCT
#+end_src
由上可知，vermagic和一下内容有关：
UTS_RELEASE: file: include/generated/utsrelease.h:1 #define UTS_RELEASE "6.5.0-ge74493e69135-dirty"，如果不想ge744...那个数字改变，可以在root/Makefile中填上EXTRAVERSION=xxx
MODULE_VERMAGIC_SMP: 是否开启SMP
MODULE_VERMAGIC_PREEMPT: 是否开启抢占
MODULE_VERMAGIC_MODULE_UNLOAD: 是否开启模块卸载
MODULE_VERMAGIC_MODVERSIONS: 是否开启modversions功能
MODULE_ARCH_VERMAGIC
MODULE_RANDSTRUCT: 是否支持randstruct功能，也就是struct布局不对齐。

mod.c文件由modpost生成。

文件编译先后顺序:
git-branch::master linux-6.5 $ make modules
  SYNC    include/config/auto.conf.cmd
  HOSTCC  scripts/genksyms/genksyms.o
  YACC    scripts/genksyms/parse.tab.[ch]
  HOSTCC  scripts/genksyms/parse.tab.o
  LEX     scripts/genksyms/lex.lex.c
  HOSTCC  scripts/genksyms/lex.lex.o
  HOSTLD  scripts/genksyms/genksyms
  HOSTCC  scripts/mod/modpost.o
  *HOSTLD  scripts/mod/modpost*
  CC      kernel/bounds.s
  CC      arch/arm/kernel/asm-offsets.s
  CALL    scripts/checksyscalls.sh
  CC      init/main.o
  ......
  ......
  ......
  ......
  ......
  ......
  ......
  CC      drivers/of/address.o
  CC      drivers/of/irq.o
  CC      drivers/of/of_reserved_mem.o
  AR      drivers/of/built-in.a
  CC      drivers/nvmem/core.o
  AR      drivers/nvmem/built-in.a
  AR      drivers/built-in.a
  AR      built-in.a
  AR      vmlinux.a
  LD      vmlinux.o
  OBJCOPY modules.builtin.modinfo
  GEN     modules.builtin
  GEN     .vmlinux.objs
  *MODPOST Module.symvers*
  CC [M]  drivers/irqchip/irq-imx-mu-msi.mod.o
  LD [M]  drivers/irqchip/irq-imx-mu-msi.ko
  CC [M]  drivers/dma/imx-sdma.mod.o
  LD [M]  drivers/dma/imx-sdma.ko
  CC [M]  drivers/char/hw_random/rng-core.mod.o
  LD [M]  drivers/char/hw_random/rng-core.ko
  CC [M]  drivers/char/hw_random/imx-rngc.mod.o
  LD [M]  drivers/char/hw_random/imx-rngc.ko

使用modinfo报错时，可采用depmod命令生成modules.dep
modinfo: can't open '/lib/modules/6.5.0-ge74493e69135-dirty/modules.dep': No such file or directory
  
** 模块构建构成modpost文件
reference: scripts/Makefile.modpost
1. 编译模块文件
   1. 编译单独的.o文件。
   2. 链接上述.o文件，成<module>.o文件。
   3. 创建<module>.mod文件，文件包含上述文件名。
   4. 创建modules.order文件，包含当前目录下所有模块。

2. 由Makefile.modpost文件操作如下：
   1. 找到所有在modules.order中的文件。
   2. modpost工具创建<module>.mod.c
   3. 创建文件Module.symvers，每个导出符号都带有CRC

3. 放置一些模块信息到模块的ELF文件section中，包含信息如下：
   Version magic (see include/linux/vermagic.h for full details)
     - Kernel release
     - SMP is CONFIG_SMP
     - PREEMPT is CONFIG_PREEMPT[_RT]
     - GCC Version
   Module info
     - Module version (MODULE_VERSION)
     - Module alias'es (MODULE_ALIAS)
     - Module license (MODULE_LICENSE)
     - See include/linux/module.h for more details

4. 构建外部模块，从Module.symvers中检索每个模块的CRC。
